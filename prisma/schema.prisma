// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           String     @id
  username     String     @unique
  displayName  String
  email        String?    @unique
  passwordHash String?
  googleId     String?
  avatarUrl    String?
  bio          String?
  sessions     Session[]
  posts        Post[]
  following    Follow[]   @relation("Following") // Kullanıcının takip ettiği
  followers    Follow[]   @relation("Followers") // Kullanıcıyı takip eden 
  likes        Likes[]
  bookmarks    Bookmark[]
  comments     Comment[]


  createdAt DateTime @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Kullanıcı silindiğinde, ilgili session da silinir.

  @@map("sessions") // Model adı veritabanında yeniden adlandırılır.
}

model Follow {
  followerId  String // Takip eden kullanıcının id'si.
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // followerId ve followingId kombinasyonu benzersiz olmalıdır.
  @@map("follows")
}

model Post {
  id          String     @id @default(cuid())
  content     String
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade) // Kullanıcı silindiğinde, ilgili session da silinir.
  attachments Media[]
  likes       Likes[]
  bookmarks   Bookmark[]
  comments     Comment[]

  createdAt DateTime @default(now())

  @@map("posts")
}

model Media {
  id     String    @id @default(cuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  @@map("comments")

}

model Likes {
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}
